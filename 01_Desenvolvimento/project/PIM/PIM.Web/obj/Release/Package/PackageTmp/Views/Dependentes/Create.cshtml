@model PIM.Web.ViewModels.DependenteVM
@using PIM.Database.TO

@{
    ViewBag.Title = "Criar - Dependente";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Criar</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Dependentes", "Index")
            </li>
            <li class="active">
                <strong>Criar</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
            @Html.ActionLink("Retornar", "Index", null, new { @class = "btn btn-primary btn-outline" })
        </div>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Criar Dependente</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            <div class="form-group">
                                @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.RG, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.RG, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RG, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Telefone, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.IdMorador, "Morador", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @if (Session["MoradorTO"] != null)
                                    {
                                        var moradorTO = (MoradorTO)Session["MoradorTO"];

                                        @Html.HiddenFor(model => model.IdMorador)
                                        @Html.EditorFor(model => model.NomeMorador, new { htmlAttributes = new { @class = "form-control", @value = Model.IdMorador, @readonly = true } })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.IdMorador, ViewBag.Morador as SelectList, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IdMorador, "", new { @class = "text-danger" })
                                    }
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.GrauParentesco, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.GrauParentesco, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.GrauParentesco, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Create" class="btn btn-success btn-outline" />
                                    @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-danger btn-outline" })
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $("#CPF").inputmask("mask", { "mask": "999.999.999-99" }, { reverse: true });
    });
</script>